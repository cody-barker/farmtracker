{"version":3,"sources":["Home.js","FarmCard.js","Farms.js","TableRow.js","AddABedForm.js","FarmDetail.js","EditFarm.js","NavBar.js","App.js","index.js"],"names":["Home","_jsxs","children","_jsx","FarmCard","_ref","farm","id","name","city","state","NavLink","to","concat","Farms","allFarms","setAllFarms","farmCards","map","_useState","useState","farmName","farmCity","farmState","_useState2","_slicedToArray","inputState","setInputState","newFarm","onInputChange","e","_objectSpread","_defineProperty","target","value","className","onSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","then","r","json","_toConsumableArray","required","onChange","type","TableRow","bed","sq_ft","crop","dtm","planting_date","harvest_date","updatedFarms","onClick","deletedBed","i","length","beds","filter","AddABedForm","useParams","parseInt","sqFt","plantingDate","harvestDate","newBed","farm_id","FarmDetail","bedsTable","navigate","useNavigate","showForm","setShowForm","find","f","tableRowComps","href","EditFarm","render","updatedFarm","patchedFarm","NavBar","App","useEffect","farms","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","BrowserRouter"],"mappings":"mRAYeA,MAVf,WAEI,OACIC,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,4BACJC,cAAA,KAAAD,SAAG,mEAGf,E,6BCYeE,MAnBf,SAAiBC,GAAU,IAARC,EAAID,EAAJC,KAGXC,EAIAD,EAJAC,GACAC,EAGAF,EAHAE,KACAC,EAEAH,EAFAG,KACAC,EACAJ,EADAI,MAGJ,OACIP,cAAA,OAAKI,GAAG,YAAWL,SACfD,eAACU,IAAO,CAACC,GAAE,UAAAC,OAAYN,GAAKL,SAAA,CACxBC,cAAA,MAAAD,SAAKM,IACLP,eAAA,KAAAC,SAAA,CAAIO,EAAK,KAAGC,SAI5B,ECgFeI,MAjGf,SAAcT,GAA2B,IAAzBU,EAAQV,EAARU,SAAUC,EAAWX,EAAXW,YAEhBC,EAAYF,EAASG,KAAI,SAAAZ,GAAI,OAAIH,cAACC,EAAQ,CAAeE,KAAMA,GAAfA,EAAKC,GAAiB,IAE5EY,EAAoCC,mBAAS,CACzCC,SAAU,GACVC,SAAU,GACVC,UAAW,KACbC,EAAAC,YAAAN,EAAA,GAJKO,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAO5BH,EAGAK,EAHAL,SACAC,EAEAI,EAFAJ,SACAC,EACAG,EADAH,UAGAK,EAAU,CACVpB,KAAMa,EACNZ,KAAMa,EACNZ,MAAOa,GAGX,SAASM,EAAcC,GACnBH,EAAaI,wBAAC,CAAC,EACRL,GAAU,GAAAM,YAAA,GACZF,EAAEG,OAAOzB,KAAOsB,EAAEG,OAAOC,QAElC,CAsBA,OACIjC,eAAA,OAAKkC,UAAU,kBAAiBjC,SAAA,CAC5BD,eAAA,OAAKkC,UAAU,uBAAsBjC,SAAA,CACjCC,cAAA,MAAAD,SAAI,UACHe,KAELhB,eAAA,OAAKkC,UAAU,uBAAsBjC,SAAA,CACjCC,cAAA,MAAAD,SAAI,eACJD,eAAA,QAAMmC,SA5BlB,SAAmBN,GACfA,EAAEO,iBACFC,MAAM,SAAU,CACZC,OAAQ,OACRC,QAAS,CACL,eAAiB,oBAErBC,KAAMC,KAAKC,UAAUf,KAExBgB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAM,IAClBF,MAAK,SAAAhB,GACEZ,EAAY,GAADH,OAAAkC,YAAKhC,GAAQ,CAAEa,KAC1BD,EAAaI,wBAAC,CAAC,EACRL,GAAU,IACbL,SAAS,GACTC,SAAS,GACTC,UAAU,KAAI,GAE9B,EAUsCrB,SAAA,CAEtBD,eAAA,SAAAC,SAAA,CAAO,YAEHC,cAAA,SACI6C,UAAQ,EACRC,SAAUpB,EACVrB,KAAK,WACL0B,MAAOb,EACP6B,KAAK,YAIbjD,eAAA,SAAAC,SAAA,CAAO,OAEHC,cAAA,SACI8C,SAAUpB,EACVrB,KAAK,WACL0B,MAAOZ,EACP4B,KAAK,YAIbjD,eAAA,SAAAC,SAAA,CAAO,QAEHC,cAAA,SACI8C,SAAUpB,EACVrB,KAAK,YACL0B,MAAOX,EACP2B,KAAK,YAIb/C,cAAA,UAAQ+C,KAAK,SAAQhD,SAAC,mBAK1C,ECtDeiD,MA1Cf,SAAiB9C,GAAgC,IAA9B+C,EAAG/C,EAAH+C,IAAKrC,EAAQV,EAARU,SAAUC,EAAWX,EAAXW,YAG1BT,EAMA6C,EANA7C,GACA8C,EAKAD,EALAC,MACAC,EAIAF,EAJAE,KACAC,EAGAH,EAHAG,IACAC,EAEAJ,EAFAI,cACAC,EACAL,EADAK,aAGAC,EAAYX,YAAOhC,GAgBvB,OACId,eAAA,MAAAC,SAAA,CACIC,cAAA,MAAAD,SAAKK,IACLJ,cAAA,MAAAD,SAAKmD,IACLlD,cAAA,MAAAD,SAAKoD,IACLnD,cAAA,MAAAD,SAAKqD,IACLpD,cAAA,MAAAD,SAAKsD,IACLrD,cAAA,MAAAD,SAAKuD,IACLtD,cAAA,MAAAD,SACIC,cAAA,UAAQwD,QAvBpB,WACIrB,MAAM,SAADzB,OAAUN,GAAM,CACjBgC,OAAQ,WAEXK,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAM,IAClBF,MAAK,SAAAgB,GACF,IAAK,IAAIC,EAAE,EAAGA,EAAI9C,EAAS+C,OAAQD,IAC/BH,EAAaG,GAAGE,KAAOL,EAAaG,GAAGE,KAAKC,QAAO,SAAAZ,GAAG,OAAIA,EAAI7C,KAAOqD,EAAWrD,EAAE,IAEtFS,EAAY0C,EAChB,GACJ,EAYuCvB,UAAU,SAAQjC,SAAC,eAI9D,EC0Fe+D,MAjIf,SAAoB5D,GAA0B,IAAxBU,EAAQV,EAARU,SAAUC,EAAWX,EAAXW,YAEvBT,EAAM2D,cAAN3D,GACLA,EAAK4D,SAAS5D,GAEd,IAAAY,EAAoCC,mBAAS,CACzCgD,KAAM,GACNd,KAAM,GACNC,IAAK,GACLc,aAAc,GACdC,YAAa,KACf9C,EAAAC,YAAAN,EAAA,GANKO,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAS5B4C,EAKA1C,EALA0C,KACAd,EAIA5B,EAJA4B,KACAC,EAGA7B,EAHA6B,IACAc,EAEA3C,EAFA2C,aACAC,EACA5C,EADA4C,YAGEC,EAAS,CACXC,QAASjE,EACT8C,MAAOe,EACPd,KAAMA,EACNC,IAAKA,EACLC,cAAea,EACfZ,aAAca,GAGlB,SAASzC,EAAcC,GACnBH,EAAaI,wBAAC,CAAC,EACRL,GAAU,GAAAM,YAAA,GACZF,EAAEG,OAAOzB,KAAOsB,EAAEG,OAAOC,QAElC,CAoCA,OACIjC,eAAA,QAAMmC,SAnCV,SAAmBN,GACfA,EAAEO,iBACFC,MAAM,QAAS,CACXC,OAAQ,OACRC,QAAS,CACL,eAAiB,oBAErBC,KAAMC,KAAKC,UAAU4B,KAExB3B,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAM,IAClBF,MAAK,SAAA2B,GACF,IAAMb,EAAe3C,EAASG,KAAI,SAAAZ,GAC9B,OAAIA,EAAKC,KAAOA,EACZwB,wBAAA,GACOzB,GAAI,IACPyD,KAAK,GAADlD,OAAAkC,YACGzC,EAAKyD,MAAI,CAAEQ,MAIfjE,CAEf,IACAU,EAAY0C,GACZ/B,EAAaI,wBAAC,CAAC,EACRL,GAAU,IACb0C,KAAM,GACNd,KAAM,GACNC,IAAK,GACLc,aAAc,GACdC,YAAa,KAAI,GAE7B,EAG8BpE,SAAA,CAEdD,eAAA,SAAAC,SAAA,CAAO,OAEHC,cAAA,SACI6C,UAAQ,EACRC,SAAUpB,EACVrB,KAAK,OACL0B,MAAOoB,EACPJ,KAAK,YAIbjD,eAAA,SAAAC,SAAA,CAAO,cAEHC,cAAA,SACI8C,SAAUpB,EACVrB,KAAK,OACL0B,MAAOkC,EACPlB,KAAK,cAIbjD,eAAA,SAAAC,SAAA,CAAO,mBAEHC,cAAA,SACI8C,SAAUpB,EACVrB,KAAK,MACL0B,MAAOqB,EACPL,KAAK,cAIbjD,eAAA,SAAAC,SAAA,CAAO,gBAECC,cAAA,SACI8C,SAAUpB,EACVrB,KAAK,eACL0B,MAAOmC,EACPnB,KAAK,YAIjBjD,eAAA,SAAAC,SAAA,CAAO,eAEHC,cAAA,SACI8C,SAAUpB,EACVrB,KAAK,cACL0B,MAAOoC,EACPpB,KAAK,YAGb/C,cAAA,UAAQ+C,KAAK,SAAQhD,SAAC,aAG1C,ECxCeuE,MArFf,SAAmBpE,GAA2B,IAAzBU,EAAQV,EAARU,SAAUC,EAAWX,EAAXW,YAEtBT,EAAM2D,cAAN3D,GACLA,EAAK4D,SAAS5D,GACd,IAIImE,EAJAC,EAAWC,cACfzD,EAAgCC,oBAAS,GAAMI,EAAAC,YAAAN,EAAA,GAAxC0D,EAAQrD,EAAA,GAAEsD,EAAWtD,EAAA,GACtBlB,EAAOS,EAASgE,MAAK,SAACC,GAAC,OAAKA,EAAEzE,KAAOA,CAAE,IACzC0E,EAAgB,GA6BpB,OA1BI3E,IAIIoE,EADyB,KAF7BO,EAAgB3E,EAAKyD,KAAK7C,KACtB,SAACkC,GAAG,OAAKjD,cAACgD,EAAQ,CAAcC,IAAKA,EAAKrC,SAAUA,EAAUC,YAAaA,GAAnDoC,EAAI7C,GAA6D,KAC3EuD,OACF,KAGR7D,eAAA,SAAAC,SAAA,CACIC,cAAA,SAAAD,SACAD,eAAA,MAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,UACJC,cAAA,MAAAD,SAAI,UACJC,cAAA,MAAAD,SAAI,SACJC,cAAA,MAAAD,SAAI,QACJC,cAAA,MAAAD,SAAI,kBACJC,cAAA,MAAAD,SAAI,iBACJC,cAAA,MAAAD,SAAI,gBAGRC,cAAA,SAAAD,SACK+E,QAMhB3E,EAiBDH,cAAA,OAAKgC,UAAU,wBAAuBjC,SAClCD,eAAA,OAAKkC,UAAU,cAAajC,SAAA,CACxBD,eAAA,OAAKkC,UAAU,qBAAoBjC,SAAA,CAC/BC,cAAA,MAAAD,SAAKI,EAAKE,OACVL,cAAA,KAAAD,SAAA,SAAAW,OAAaP,EAAKG,QAClBN,cAAA,KAAAD,SAAA,UAAAW,OAAcP,EAAKI,YAGvBP,cAAA,OAAKgC,UAAU,mBAAkBjC,SAC7BC,cAAA,KAAGI,GAAG,mBAAmB2E,KAAI,UAAArE,OAAYN,EAAE,SAAQL,SAC/CD,eAAA,UAAAC,SAAA,CAAQ,QAAMI,EAAKE,YAI3BL,cAAA,OAAKgC,UAAU,mBAAkBjC,SAC7BD,eAAA,UAAQ0D,QAxBxB,WACIrB,MAAM,UAADzB,OAAWN,GAAM,CAClBgC,OAAQ,WAEXK,KAAK5B,EAAY+B,YAAIhC,GAAUiD,QAAO,SAAAgB,GAAC,OAAIA,EAAEzE,KAAOA,CAAE,MACtDqC,KAAK+B,EAAS,UACnB,EAkB+CxC,UAAU,SAAQjC,SAAA,CAAC,UAAQI,EAAKE,UAGnEL,cAAA,OAAKgC,UAAU,mBAAkBjC,SAC7BC,cAAA,UAAQwD,QAhCxB,WACImB,GAAaD,EACjB,EA8B+C3E,SAAE2E,EAAW,iBAAmB,gBAGlEA,EAAW1E,cAAC8D,EAAW,CAAClD,SAAUA,EAAUC,YAAaA,IAAiB,KAE3Eb,cAAA,OAAKgC,UAAU,0BAAyBjC,SACnCI,EAAOoE,EAAY,oBAzCzBvE,cAAA,KAAGgC,UAAU,gBAAejC,SAAC,cA8C5C,EC8BeiF,MAnHf,SAAiB9E,GAA2B,IAAzBU,EAAQV,EAARU,SAAUC,EAAWX,EAAXW,YAEpBT,EAAM2D,cAAN3D,GACLA,EAAK4D,SAAS5D,GACd,IAAIoE,EAAWC,cAETtE,EAAOS,EAASgE,MAAK,SAACC,GAAC,OAAKA,EAAEzE,KAAOA,CAAE,IAE7CY,EAAoCC,mBAAS,CACzCC,SAAU,GACVC,SAAU,GACVC,UAAW,GACX6D,QAAQ,IACV5D,EAAAC,YAAAN,EAAA,GALKO,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAQ5BH,EAIAK,EAJAL,SACAC,EAGAI,EAHAJ,SACAC,EAEAG,EAFAH,UACA6D,EACA1D,EADA0D,OAGEC,EAAc,CAChB7E,KAAMa,EACNZ,KAAMa,EACNZ,MAAOa,GAaX,SAASM,EAAcC,GACnBH,EAAaI,wBAAC,CAAC,EACRL,GAAU,GAAAM,YAAA,GACZF,EAAEG,OAAOzB,KAAOsB,EAAEG,OAAOC,QAElC,CAyBA,OAxCI5B,IAAS8E,GACTzD,EAAaI,wBAAC,CAAC,EACRL,GAAU,IACbL,SAAUf,EAAKE,KACfc,SAAUhB,EAAKG,KACfc,UAAWjB,EAAKI,MAChB0E,QAASA,KAkCZ9E,EAKDL,eAAA,OAAAC,SAAA,CACID,eAAA,MAAAC,SAAA,CAAI,QAAMI,EAAKE,QACfL,cAAA,OAAKgC,UAAU,0BAAyBjC,SACpCD,eAAA,QAAMmC,SA/BlB,SAAsBN,GAClBA,EAAEO,iBACFC,MAAM,UAADzB,OAAWN,GAAM,CAClBgC,OAAQ,QACRC,QAAS,CACL,eAAiB,oBAErBC,KAAMC,KAAKC,UAAU0C,KAExBzC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAM,IAClBF,MAAK,SAAA0C,GACF,IAAM5B,EAAe3C,EAASG,KAAI,SAAA8D,GAC9B,OAAIA,EAAEzE,KAAOA,EACF+E,EAEAN,CAEf,IACAhE,EAAY0C,EAChB,IACCd,KAAK+B,EAAS,UAAD9D,OAAWN,IAC7B,EAUyCL,SAAA,CACzBD,eAAA,SAAAC,SAAA,CAAO,YAEHC,cAAA,SACI6C,UAAQ,EACRC,SAAUpB,EACVrB,KAAK,WACL0B,MAAOb,EACP6B,KAAK,YAIbjD,eAAA,SAAAC,SAAA,CAAO,OAEHC,cAAA,SACI8C,SAAUpB,EACVrB,KAAK,WACL0B,MAAOZ,EACP4B,KAAK,YAIbjD,eAAA,SAAAC,SAAA,CAAO,QAEHC,cAAA,SACI8C,SAAUpB,EACVrB,KAAK,YACL0B,MAAOX,EACP2B,KAAK,YAIb/C,cAAA,UAAQgC,UAAU,aAAae,KAAK,SAAQhD,SAAC,mBAvClDC,cAAA,KAAGgC,UAAU,gBAAejC,SAAC,gBA4C5C,ECxGeqF,MATf,WACI,OACItF,eAAA,OAAKM,GAAG,SAAQL,SAAA,CACZC,cAACQ,IAAO,CAACC,GAAG,IAAGV,SAAC,SAChBC,cAACQ,IAAO,CAACC,GAAG,SAAQV,SAAC,YAGjC,E,MC8BesF,MA/Bf,WAEE,IAAArE,EAAgCC,mBAAS,IAAGI,EAAAC,YAAAN,EAAA,GAArCJ,EAAQS,EAAA,GAAER,EAAWQ,EAAA,GAQ5B,OANAiE,qBAAU,WACRnD,MAAM,UACLM,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAM,IAClBF,MAAK,SAAA8C,GAAK,OAAI1E,EAAY0E,EAAM,GACnC,GAAE,IAGAzF,eAAA,OAAKkC,UAAU,MAAKjC,SAAA,CAClBC,cAACoF,EAAM,IACLtF,eAAC0F,IAAM,CAAAzF,SAAA,CACLC,cAACyF,IAAK,CACJC,KAAM,kBACNC,QAAS3F,cAACgF,EAAQ,CAACpE,SAAUA,EAAUC,YAAaA,MACtDb,cAACyF,IAAK,CACJC,KAAK,aACLC,QAAS3F,cAACsE,EAAU,CAAC1D,SAAUA,EAAUC,YAAaA,MACxDb,cAACyF,IAAK,CACJC,KAAK,SACLC,QAAS3F,cAACW,EAAK,CAACC,SAAUA,EAAUC,YAAaA,MACnDb,cAACyF,IAAK,CACJC,KAAK,IACLC,QAAS3F,cAACH,EAAI,CAACe,SAAUA,EAAUC,YAAaA,WAI5D,EChCa+E,IAASC,WAAWC,SAASC,eAAe,SACpDd,OACDjF,cAACgG,IAAa,CAAAjG,SACVC,cAACqF,EAAG,M","file":"static/js/main.ba23c5f4.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Home() {\n\n    return(\n        <div>\n            <h1>Welcome to Farm Tracker</h1>\n            <p>Helping you keep track of all your farms and all your crops.</p>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nfunction FarmCard({farm}) {\n\n    const {\n        id,\n        name,\n        city,\n        state\n    } = farm\n\n    return(\n        <div id=\"farm-card\">\n            <NavLink to={`/farms/${id}`}>\n                <h3>{name}</h3>\n                <p>{city}, {state}</p>\n            </NavLink>\n        </div>\n    )\n}\n\nexport default FarmCard","import React, {useState} from 'react'\nimport FarmCard from './FarmCard'\n\nfunction Farms({allFarms, setAllFarms}) {\n\n    const farmCards = allFarms.map(farm => <FarmCard key={farm.id} farm={farm}/>)\n\n    const [inputState, setInputState] = useState({\n        farmName: \"\",\n        farmCity: \"\",\n        farmState: \"\"\n    })\n\n    const {\n        farmName,\n        farmCity,\n        farmState\n    } = inputState\n\n    let newFarm = {\n        name: farmName,\n        city: farmCity,\n        state: farmState,\n    }\n\n    function onInputChange(e) {\n        setInputState({\n            ...inputState,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    function onAddFarm(e) {\n        e.preventDefault()\n        fetch('/farms', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\" : \"application/json\"\n            },\n            body: JSON.stringify(newFarm)\n        })\n        .then(r => r.json())\n        .then(newFarm => {\n                setAllFarms([...allFarms, newFarm])\n                setInputState({\n                    ...inputState, \n                    farmName:\"\",\n                    farmCity:\"\",\n                    farmState:\"\"})}\n        )\n    }\n\n    return(\n        <div className=\"farms-container\">\n            <div className=\"farm-cards-container\">\n                <h1>Farms</h1>\n                {farmCards}\n            </div>\n            <div className=\"add-a-farm-container\">\n                <h2>Add a Farm</h2>\n                <form onSubmit={onAddFarm}>\n\n                    <label>\n                        Farm Name\n                        <input\n                            required\n                            onChange={onInputChange}\n                            name=\"farmName\"\n                            value={farmName}\n                            type=\"text\">\n                        </input>\n                    </label>\n\n                    <label>\n                        City\n                        <input \n                            onChange={onInputChange}\n                            name=\"farmCity\"\n                            value={farmCity}\n                            type=\"text\">\n                        </input>\n                    </label>\n\n                    <label>\n                        State\n                        <input \n                            onChange={onInputChange}\n                            name=\"farmState\"\n                            value={farmState}\n                            type=\"text\">\n                        </input>\n                    </label>\n\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default Farms","import React from 'react'\n\nfunction TableRow({bed, allFarms, setAllFarms}) {\n\n    const {\n        id,\n        sq_ft,\n        crop,\n        dtm,\n        planting_date,\n        harvest_date\n    } = bed\n\n    let updatedFarms = [...allFarms]\n\n    function onDelete(){\n        fetch(`/beds/${id}`, {\n            method: \"DELETE\"\n        })\n        .then(r => r.json())\n        .then(deletedBed => {\n            for (let i=0; i < allFarms.length; i++){\n                updatedFarms[i].beds = updatedFarms[i].beds.filter(bed => bed.id !== deletedBed.id)\n            }\n            setAllFarms(updatedFarms)\n        })\n    }\n\n\n    return(\n        <tr>\n            <td>{id}</td>\n            <td>{sq_ft}</td>\n            <td>{crop}</td>\n            <td>{dtm}</td>\n            <td>{planting_date}</td>\n            <td>{harvest_date}</td>\n            <td>\n                <button onClick={onDelete} className=\"delete\">Delete</button>\n            </td>\n        </tr>\n    )\n}\n\nexport default TableRow","import React, {useState} from 'react'\nimport { useParams } from 'react-router-dom'\n\nfunction AddABedForm({allFarms, setAllFarms}){\n\n    let {id} = useParams()\n    id = parseInt(id)\n\n    const [inputState, setInputState] = useState({\n        sqFt: \"\",\n        crop: \"\",\n        dtm: \"\",\n        plantingDate: \"\",\n        harvestDate: \"\",\n    })\n\n    const {\n        sqFt,\n        crop,\n        dtm,\n        plantingDate,\n        harvestDate,\n    } = inputState\n\n    const newBed = {\n        farm_id: id,\n        sq_ft: sqFt,\n        crop: crop,\n        dtm: dtm,\n        planting_date: plantingDate,\n        harvest_date: harvestDate\n    }\n\n    function onInputChange(e) {\n        setInputState({\n            ...inputState,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    function onAddABed(e) {\n        e.preventDefault()\n        fetch('/beds', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\" : \"application/json\"\n            },\n            body: JSON.stringify(newBed)\n        })\n        .then(r => r.json())\n        .then(newBed => {\n            const updatedFarms = allFarms.map(farm => {\n                if (farm.id === id) {\n                    return {\n                        ...farm,\n                        beds: [\n                            ...farm.beds, newBed\n                        ]\n                    }\n                } else {\n                    return farm\n                }\n            })\n            setAllFarms(updatedFarms)\n            setInputState({\n                ...inputState, \n                sqFt: \"\",\n                crop: \"\",\n                dtm: \"\",\n                plantingDate: \"\",\n                harvestDate: \"\"})}\n        )\n    }\n\n    return(\n        <form onSubmit={onAddABed}>\n\n                    <label>\n                        Crop\n                        <input\n                            required\n                            onChange={onInputChange}\n                            name=\"crop\"\n                            value={crop}\n                            type=\"text\">\n                        </input>\n                    </label>\n                    \n                    <label>\n                        Square Feet\n                        <input\n                            onChange={onInputChange}\n                            name=\"sqFt\"\n                            value={sqFt}\n                            type=\"number\">\n                        </input>\n                    </label>\n\n                    <label>\n                        Days to Maturity\n                        <input\n                            onChange={onInputChange}\n                            name=\"dtm\"\n                            value={dtm}\n                            type=\"number\">\n                        </input>\n                    </label>\n\n                    <label>\n                        Planting Date\n                            <input\n                                onChange={onInputChange}\n                                name=\"plantingDate\"\n                                value={plantingDate}\n                                type=\"date\">\n                            </input>\n                    </label>\n\n                    <label>\n                        Harvest Date\n                        <input\n                            onChange={onInputChange}\n                            name=\"harvestDate\"\n                            value={harvestDate}\n                            type=\"date\">\n                        </input>\n                    </label>\n                    <button type=\"submit\">Submit</button>\n                </form>\n    )\n}\n\nexport default AddABedForm","import React, {useState} from 'react'\nimport { useParams, useNavigate } from 'react-router-dom'\nimport TableRow from './TableRow'\nimport AddABedForm from './AddABedForm'\n\nfunction FarmDetail({allFarms, setAllFarms}) {\n\n    let {id} = useParams()\n    id = parseInt(id)\n    let navigate = useNavigate()\n    const [showForm, setShowForm] = useState(false)\n    const farm = allFarms.find((f) => f.id === id)\n    let tableRowComps = []\n    let bedsTable;\n\n    if (farm) {\n        tableRowComps = farm.beds.map(\n            (bed) => <TableRow key={bed.id} bed={bed} allFarms={allFarms} setAllFarms={setAllFarms}/>)\n        if (tableRowComps.length === 0) {\n            bedsTable = null\n        } else {\n            bedsTable = \n                <table>\n                    <thead>\n                    <tr>\n                        <th>Bed #</th>\n                        <th>Sq Ft</th>\n                        <th>Crop</th>\n                        <th>DTM</th>\n                        <th>Planting Date</th>\n                        <th>Harvest Date</th>\n                        <th>Delete</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {tableRowComps}\n                    </tbody>\n                </table>\n        }\n    }\n\n    if (!farm) {\n        return <p className=\"alert warning\">Loading...</p>;\n      }\n\n    function handleFormVis() {\n        setShowForm(!showForm)\n    }\n\n    function onDeleteFarm(){\n        fetch(`/farms/${id}`, {\n            method: \"DELETE\"\n        })\n        .then(setAllFarms([...allFarms].filter(f => f.id !== id)))\n        .then(navigate('/farms'))\n    }\n\n    return(\n        <div className=\"farm-detail-container\">\n            <div className=\"farm-detail\">\n                <div className=\"farm-name-location\">\n                    <h2>{farm.name}</h2>\n                    <p>{`City: ${farm.city}`}</p>\n                    <p>{`State: ${farm.state}`}</p>\n                </div>\n                \n                <div className=\"button-container\">\n                    <a id=\"edit-farm-button\" href={`/farms/${id}/edit`}>\n                        <button>Edit {farm.name}</button>\n                    </a>\n                </div>\n\n                <div className=\"button-container\">\n                    <button onClick={onDeleteFarm} className=\"delete\">Delete {farm.name}</button>\n                </div>\n\n                <div className=\"button-container\">\n                    <button onClick={handleFormVis}>{showForm ? \"Close Bed Form\" : \"Add a Bed\"}</button>\n                </div>\n                \n                {showForm ? <AddABedForm allFarms={allFarms} setAllFarms={setAllFarms}/> : null}\n                \n                <div className=\"add-farm-form-container\">\n                    {farm ? bedsTable : \"Loading...\"}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default FarmDetail","import React, {useState} from 'react'\nimport {useParams, useNavigate} from 'react-router-dom'\n\nfunction EditFarm({allFarms, setAllFarms}) {\n\n    let {id} = useParams()\n    id = parseInt(id)\n    let navigate = useNavigate()\n\n    const farm = allFarms.find((f) => f.id === id)\n\n    const [inputState, setInputState] = useState({\n        farmName: \"\",\n        farmCity: \"\",\n        farmState: \"\",\n        render: false\n    })\n\n    const {\n        farmName,\n        farmCity,\n        farmState,\n        render\n    } = inputState\n\n    const updatedFarm = {\n        name: farmName,\n        city: farmCity,\n        state: farmState,\n    }\n\n    if (farm && !render) {\n        setInputState({\n            ...inputState,\n            farmName: farm.name,\n            farmCity: farm.city,\n            farmState: farm.state,\n            render: !render\n        })\n    }\n\n    function onInputChange(e) {\n        setInputState({\n            ...inputState,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    function onUpdateFarm(e) {\n        e.preventDefault()\n        fetch(`/farms/${id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\" : \"application/json\"\n            },\n            body: JSON.stringify(updatedFarm)\n        })\n        .then(r => r.json())\n        .then(patchedFarm => {\n            const updatedFarms = allFarms.map(f => {\n                if (f.id === id) {\n                    return patchedFarm\n                } else {\n                    return f\n                }\n            })\n            setAllFarms(updatedFarms)\n        })\n        .then(navigate(`/farms/${id}`))\n    }\n\n    if (!farm) {\n        return <p className=\"alert warning\">\"Loading...\"</p>;\n      }\n\n    return(\n        <div>\n            <h3>Edit {farm.name}</h3>\n            <div className=\"update-a-farm-container\">\n                <form onSubmit={onUpdateFarm}>\n                    <label>\n                        Farm Name\n                        <input\n                            required\n                            onChange={onInputChange}\n                            name=\"farmName\"\n                            value={farmName}\n                            type=\"text\">\n                        </input>\n                    </label>\n\n                    <label>\n                        City\n                        <input \n                            onChange={onInputChange}\n                            name=\"farmCity\"\n                            value={farmCity}\n                            type=\"text\">\n                        </input>\n                    </label>\n\n                    <label>\n                        State\n                        <input \n                            onChange={onInputChange}\n                            name=\"farmState\"\n                            value={farmState}\n                            type=\"text\">\n                        </input>\n                    </label>\n\n                    <button className=\"update-btn\" type=\"submit\">Submit</button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default EditFarm","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nfunction NavBar() {\n    return(\n        <nav id=\"navbar\">\n            <NavLink to=\"/\">Home</NavLink>\n            <NavLink to=\"/farms\">Farms</NavLink>\n        </nav>\n    )\n}\n\nexport default NavBar","import React, {useState, useEffect} from 'react'\nimport {Routes, Route} from 'react-router-dom'\nimport Home from './Home'\nimport Farms from './Farms'\nimport FarmDetail from './FarmDetail'\nimport EditFarm from './EditFarm'\nimport NavBar from './NavBar'\nimport './App.css';\n\nfunction App() {\n   \n  const [allFarms, setAllFarms] = useState([])\n\n  useEffect(() => {\n    fetch(\"/farms\")\n    .then(r => r.json())\n    .then(farms => setAllFarms(farms))\n  },[])\n\n  return (\n    <div className=\"App\">\n      <NavBar />\n        <Routes>\n          <Route\n            path =\"/farms/:id/edit\"\n            element={<EditFarm allFarms={allFarms} setAllFarms={setAllFarms}/>}/>\n          <Route \n            path=\"/farms/:id\"\n            element={<FarmDetail allFarms={allFarms} setAllFarms={setAllFarms}/>}/>\n          <Route\n            path=\"/farms\"\n            element={<Farms allFarms={allFarms} setAllFarms={setAllFarms}/>}/>\n          <Route \n            path=\"/\" \n            element={<Home allFarms={allFarms} setAllFarms={setAllFarms}/>}/>\n        </Routes>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter} from 'react-router-dom'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n);\n\n"],"sourceRoot":""}